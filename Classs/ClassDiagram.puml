@startuml Classes

title Class Diagram

' Define the main classes
class User {
    +id: String
    +fullName: String
    +email: String
    +phone: String
    +password: String
    +profileImage: String
    +secondaryPhone: String
    +gender: Gender
    +dateOfBirth: Date
    +addressInformation: AddressInformation
    +website: String
    +occupation: String
    +preferences: AppPreferences
    +register()
    +login()
    +forgetPassword()
    +resetPassword()
    +viewListings()
    +verifyOTP()
    +createProperty(property: Property)
    +openChatChannel(channelId: String)
}

class AppPreferences {
    +purposeOfApp: AppPurpose
    +numberOfPeopleLiving: int
    +getAppPreferences(userId: String)
}

enum AppPurpose {
    LAND,
    HOUSE,
    FLAT,
    APARTMENT
}

class AddressInformation {
    +currentAddress: String
    +city: String
    +province: String
    +postalCode: String
}

enum Gender {
    MALE,
    FEMALE,
    OTHERS
}

class Property {
    +id: String
    +address: String
    +latitude: String
    +longitude: String
    +price: Double
    +isFav: Boolean
    +creatorPrivacy: String 'full/limited/custom
    +purpose: PropertyPurpose
    +status: String
    +publishStatus: Boolean 'true for published, false for draft
    +features: PropertyFeatures
    +addDetails()
    +updateDetails()
    +deleteDetails()
    +getDetails()
    +saveAsDraft()
    +publish()
    +addToFavorites()
    +removeFromFavorites()
    +chatWithPoster()
    +shareProperty()
}

enum PropertyPurpose {
    RENT
}

class PropertyFeatures {
    +environment: Environment
    +petPolicy: Boolean 'true if pets allowed, false if not
    +floorLevel: int
    +numberOfRooms: int
    +numberOfKitchens: int
    +numberOfBathrooms: int
    +facingDirection:String 'North South ...
    +numberOfHalls: int
    +roadWidth: Double
    +condition: String 'new,old,needs mantainance
    +propertyAge: PropertyAge   
    +availabilityStatus: AvailabilityStatus
    +nearbyFacilities: List<NearbyFacility>
    +propertyType: PropertyType
    +isNegotiable: Boolean
    +parkingAvailability: ParkingAvailability
    +amenities: List<Amenity>
    +listingDuration: int 'in days
}

enum PropertyAge{
    NEW,
    TWO_YEARS,
    THREE_PLUS_YEARS

}

enum ParkingAvailability {
    ONE_CAR,
    TWO_CARS,
    THREE_PLUS_CARS
}

enum Environment {
    KID_FRIENDLY,
    BALCONY,
    GARDEN,
    OTHER
}

enum NearbyFacility {
    PARK,
    HOSPITAL,
    SCHOOL,
    DEPARTMENT_STORE,
    FUTSAL,
    SWIMMING_POOL,
    GYM
}

enum Amenity {
    PARK,
    GYM,
    FUTSAL,
    SWIMMING_POOL,
    PET_FRIENDLY,
    BALCONY,
    PARKING,
    FURNISHED,
    SEMI_FURNISHED
}

enum PropertyType {
    FLAT,
    APARTMENT,
    HOME,
    VILLA,
    SHOP,
    ROOM
}

enum AvailabilityStatus {
    AVAILABLE,
    NOT_AVAILABLE
}

class Notification {
    +title: String
    +body: String
    +notifiedAt: DateTime
}

class NotificationSettings {
    +turnOff()
    +turnOn()
    +mute()
}

class LocationSettings {
    +addNewAddress()
    +updateCurrentLocation()
}

class LanguageSettings {
    +setDefaultLanguage()
}

class ChatChannel {
    +id: String
    +propertyId: String
    +sellerId: String
    +buyerId: String
    +createChannel(property: Property, seller: User, buyer: User)
    +getTextMessages()
    +requestPropertyPictures()
    +sendVoiceMessage()
    +sendPictures()
    +sendAttachments()
    +copyOfferLink()
    +saveContact()
    +shareMyNumber()
    +viewChatMembers()
    +muteNotifications()
    +editConversation()
    +reportSeller()
    +discloseMyNumberForFutureReference()
}

class Message {
    +id: String
    +senderId: String
    +channelId: String
    +content: String
    +timestamp: DateTime
    +sendMessage()
    +receiveMessage()
}

' Define databases as classes
class PropertyDatabase {
    +addProperty(property: Property)
    +updatePropertyPublishStatus(propertyId: String, status: Boolean)
    +updateProperty(property: Property)
    +deleteProperty(propertyId: String)
    +getPropertyById(propertyId: String)
}

class UserDatabase {
    +storeUser(user: User)
    +getUserById(userId: String)
    +updateUser(user: User)
}

class MessagingDatabase {
    +storeMessage(message: Message)
    +getMessagesByChannel(channelId: String)
}

class ChatChannelDatabase {
    +storeChannel(channel: ChatChannel)
    +getChannelByPropertyAndBuyer(propertyId: String, buyerId: String)
}

' Relationships
User --> AddressInformation : "has 1"
User --> PropertyDatabase : "manages properties"
User --> ChatChannelDatabase : "manages chat channels"
User --> MessagingDatabase : "sends/views messages"
User --> Notification : "receives"
User --> NotificationSettings : "manages notifications"
User --> LocationSettings : "manages location"
User --> LanguageSettings : "sets language preference"
MessagingDatabase --> Message : "stores"



PropertyDatabase --> Property : "stores"
Property --> PropertyFeatures : "has 1"


Message --> ChatChannel : "belongs to"
ChatChannel --> Property : "related to"
ChatChannelDatabase --> ChatChannel : "stores"

@enduml
