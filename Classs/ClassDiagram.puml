@startuml Classes

title Class 

' Define the main classes
class User {
    +id: String
    +fullName: String
    +email: String
    +phone: String
    +password:String
    +profileImage: String
    +secondaryPhone: String
    +gender:Gender
    +dateOfBirth: Date   
    +addressInformation: AddressInformation
    +website:String
    +occupation:String
    +preferences: AppPrefernces
    +register()
    +login()
    +forgetPassword()
    +resetPassword()
    +viewListings()
    +verifyOTP()
    +CreateProperty(offer: Offer)
    +sendMessage(channelId: String, message: Message)
    +viewMessages(channelId: String)
    
}

class AppPrefernces{
    +purposeOfApp: AppPurposes
    +numberOfPeopleLiving: int
    +getAppPreferences(userId:ID)
    
}

enum AppPurposes{
    land,
    house,
    flat,
    Apartment,
}
class AddressInformation{
    +currentAddress: String,
    +city: String,
    +sprovince: String,
    +postalCoad:String
}

enum Gender{
    Male,
    Female,
    Others,
}



class Property {
    +id: String
    +address: String
    +lat: String
    +long: String
    +price: Double
    +CreatersPrivacy: String (full/limited/custom)
    ' +for: String (sell/rent)
    +status: String
    +publishStatus: bool 'true for published false if in draft
    +features: PropertyFeatures
    +addDetails()
    +updateDetails()  
    +deleteDetails()
    +getDetails()
    +saveAsDraft()
    +publish()
    +chatWithPoster()
    
}

class PropertyFeatures {
    +environment: Environment
    +petPolicy: Boolean 'pets allowed :true, pets not allowed: false
    +fLoorLevel: int '0,1,2,3...
     + NunberOFRooms:int
     + NunberOFKitchen:int
     +NumberOFBathroom:int 
     +NumberOfHall:int 
    +availabilityStatus: String
    +nearbyFacilities: PropertyType
    +propertyType: PropertyType
    +isNegotiable: Boolean
    +parkingAvailability: ParkingAvailability
    +amenities: Amenities
    +listingDuration: int 'Days
    
}

enum ParkingAvailability{
    1 Car,
    2 Car,
    3+ Cars,
}



enum Environment{
kidFriendly,
Balcony,
Gardens,
Other
}

enum NearByFacilities{
     Parks,
    Hospitals,
    Schools,
    Department Stores,
    Futsal,
    Swimming Pool,
    Gym,

}
enum BuildingFacilities{
   park,
    Gym,
    Futsal,
    Swimming Pool,
    Pet Friendly,
    Balcony,
    Parking,
    Furnished,
    Semi-furnished,
}

enum PropertyType{
    Flats,
    Apartments,
    Homes,
    Villas,
    Shutter,
    Rooms,
}


class ChatChannel {
    +id: String
    +propertyId: String
    +sellerId: String
    +buyerId: String
    +createChannel(property: Property, seller: Seller, buyer: Buyer)
    +getMessages()
}

class Message {
    +id: String
    +senderId: String
    +channelId: String
    +content: String
    +timestamp: DateTime
    +sendMessage()
    +receiveMessage()
}

' Define databases as classes
class PropertyDatabase {
    +addProperty(property: Property)
    +updatePropertyPublishStatus(property: Property)
    +updateProperty(property: Property)
    +deleteProperty(propertyId: String)
    +getPropertyById(propertyId: String)
}

class UserDatabase {
    +storeUser(user: User)
    +getUserById(userId: String)
    +updateUser(user: User)
}



class MessagingDatabase {
    +storeMessage(message: Message)
    +getMessagesByChannel(channelId: String)
}

class ChatChannelDatabase {
    +storeChannel(channel: ChatChannel)
    +getChannelByPropertyAndBuyer(propertyId: String, buyerId: String)
}

' Relationships
User -- PropertyDatabase : "view"

User -- ChatChannelDatabase : "access chat channels"
User -- AddressInformation : "has"

User -- PropertyDatabase : "manage properties"

User -- ChatChannelDatabase : "manage chat channels"
User -- MessagingDatabase : "send/view messages"



PropertyDatabase -- Property : "stores"
UserDatabase -- User : "stores"


Property "1" -- "1" PropertyFeatures : "has"
Message -- ChatChannel : "belongs to"
ChatChannel -- Property : "related to"
ChatChannelDatabase -- ChatChannel : "stores"
ChatChannel "1" -- "1" User : "with"
ChatChannel "1" -- "1" User : "with"

@enduml
